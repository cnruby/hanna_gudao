- entry = values[:entry]
- sections = values[:sections].keys if values.has_key?(:sections)
- methods = entry.method_list + entry.attributes
- unless methods.empty?
  #method-list
    %h2 Methods
    - %w[attr attr_accessor attr_reader attr_writer class instance].each do |type|
      - (RDoc::VISIBILITIES rescue RDoc::Context::VISIBILITIES).each do |vis|
        -# FIXME ugly
        - list = methods.reject { |x| x.respond_to?(:is_alias_for) && x.is_alias_for }.select { |x| x.visibility == vis && x.type == type.to_s }.sort
        - unless list.empty?
          - type_result = ""
          - if type =~ /^attr_/
            - type_result += type.sub(/^attr_/, '').capitalize
          - else
            - type_result += type.capitalize
          - type_result = "#{vis.to_s.capitalize} #{type_result}"
          %h3= type_result
          %ol
            - list.each do |method|
              - if method.respond_to?(:aref)
                - if method.name.to_s.empty? && method.call_seq
                  %li= link_to method.call_seq.gsub(/<br\s*\/?>/, "").split(/[\r\n]+/).map{ |s| s.split(/([({]+|\[\{|\s+(#?=>|&rarr;)\s+)/).first.sub(/^[A-Za-z0-9_:]+\./, "").sub(/\s+=\s+.*/, "=").strip }.uniq.join("<br />\n"), '#' + method.aref
                - else
                  %li= link_to method.name, '#' + method.aref
              - elsif method.respond_to?(:html_name)
                %li= link_to method.name, "#method-#{method.html_name}"
              - else
                %li= method.name

- if entry.requires or sections or entry.includes
  #context
    - unless entry.requires.empty?
      #requires
        %h2 Required files
        %ol
          - entry.requires.each do |req|
            %li= req.name

    - if sections && (sections.length > 1 || sections.first.title.to_s != '')
      #contents
        %h2 Contents
        %ol
          - sections.sort_by{|s| s.title.to_s}.each do |section|
            %li= link_to section.title, "##{section.aref}"

    - unless entry.includes.empty?
      #includes
        %h2 Included modules
        %ol
          - entry.includes.each do |inc|
            - if (mod = inc.module).is_a?(String)
              %li= inc.name
            - else
              %li= link_to inc.name, entry.aref_to(mod.path)

